<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Setup a powerful Kubernetes client on My Kubernetes Book</title>
    <link>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/</link>
    <description>Recent content in Setup a powerful Kubernetes client on My Kubernetes Book</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Basics tools</title>
      <link>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/basics/</guid>
      <description>Generic pre-requisites We will need pip and gcc for some tools, so lets install them if needed:
sudo apt-get install python3-pip gcc -y Install kubectl CLI tool In order to test and manage the k3s cluster, it could be useful to have a kubectl cli install in the master nodes:
curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl chmod +x ./kubectl sudo mv ./kubectl /usr/local/bin/kubectl # Test it kubectl version --client kubectl auto-complete Use the following commands to add auto-completion to your bash shell for the kubectl command (or it&amp;rsquo;s k alias)</description>
    </item>
    
    <item>
      <title>Arkade</title>
      <link>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/arkade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/arkade/</guid>
      <description>Arkade is a great open-source Kubernetes &amp;ldquo;market-place&amp;rdquo; project initiated by @alexellis.
The arkade CLI provides a simple method to download your favourite devops CLIs and install helm charts, with a single command.
# Note: you can also run without `sudo` and move the binary yourself curl -sLS https://dl.get-arkade.dev | sudo sh # Test arkade --help Install a CLI tool # List available CLI tools arkade get # Example: arkade get yq Install a K8S app # List available apps arkade install / --help # Example: kubernetes-dashboard arkade install kubernetes-dashboard </description>
    </item>
    
    <item>
      <title>k9s</title>
      <link>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/k9s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/k9s/</guid>
      <description>K9s is a terminal based UI to interact with your Kubernetes clusters. The aim of this project is to make it easier to navigate, observe and manage your deployed applications in the wild.
K9s continually watches Kubernetes for changes and offers subsequent commands to interact with your observed resources.
CLI installation curl -L https://github.com/derailed/k9s/releases/download/v0.24.2/k9s_Linux_x86_64.tar.gz | tar -xz chmod +x k9s &amp;amp;&amp;amp; sudo mv ./k9s /usr/local/bin/k9s k9s version Skin Apply a pre-defined skin to the output:</description>
    </item>
    
    <item>
      <title>kubens &amp; kubectx</title>
      <link>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/kubens-and-kubectx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/kubens-and-kubectx/</guid>
      <description> Thanks to @ahmetb: https://github.com/ahmetb/kubectx
  kubectxis a utility to manage and switch between kubectl contexts. kubensis a utility to switch between Kubernetes namespaces.  sudo git clone https://github.com/ahmetb/kubectx /opt/kubectx sudo ln -s /opt/kubectx/kubectx /usr/local/bin/kubectx sudo ln -s /opt/kubectx/kubens /usr/local/bin/kubens Then you can easly switch both context and namespace by:
kubectx # list contexts kubectx &amp;lt;name&amp;gt; # switch context kubens # list namespace kubens &amp;lt;name&amp;gt; # switch namespace </description>
    </item>
    
    <item>
      <title>jsonnet</title>
      <link>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/jsonnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/jsonnet/</guid>
      <description>Jsonnet is a data templating language for app and tool developers
 Generate config data Side-effect free Organize, simplify, unify Manage sprawling config  # Update or install golang support sudo apt install golang # Expand PATH with `go get` binary folder echo &amp;#39;PATH=&amp;#34;~/go/bin/:&amp;#34;$PATH&amp;#39; &amp;gt;&amp;gt; ~/.bashrc . ~/.bashrc # Install with go go get github.com/google/go-jsonnet/cmd/jsonnet # Test it jsonnet --version gojsontoyaml jsonnet provides json files but it is more easy to use yaml ones.</description>
    </item>
    
    <item>
      <title>Octant</title>
      <link>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/octant/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/octant/</guid>
      <description>Octant is a tool for developers to understand how applications run on a Kubernetes cluster.
It aims to be part of the developer&amp;rsquo;s toolkit for gaining insight and approaching complexity found in Kubernetes. Octant offers a combination of introspective tooling, cluster navigation, and object management along with a plugin system to further extend its capabilities.
 Installation curl -L https://github.com/vmware-tanzu/octant/releases/download/v0.16.3/octant_0.16.3_Linux-64bit.deb &amp;gt; /tmp/octant.deb dpkg -i /tmp/octant.deb # To run and access octant from http://localhost:7777 octant # To remotly run and access octant: OCTANT_LISTENER_ADDR=X.</description>
    </item>
    
    <item>
      <title>Argo cli</title>
      <link>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/argo-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/argo-cli/</guid>
      <description> If you need to use Argo from this client machine.
 curl -sL https://github.com/argoproj/argo/releases/download/latest/argo-linux-amd64.gz | gunzip &amp;gt; argo chmod +x argo &amp;amp;&amp;amp; sudo mv ./argo /usr/local/bin/argo argo version Configuration # Argo namespace export ARGO_NAMESPACE=argo # Start port forwarding kubectl -n $ARGO_NAMESPACE port-forward deployment/argo-server 2746:2746 &amp;amp; # keep it running in bg; user the following command to get the job number: jobs # if needed: get it back in foreground: fg 1 </description>
    </item>
    
    <item>
      <title>OpenFaaS CLI</title>
      <link>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/openfaas-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/openfaas-cli/</guid>
      <description> If you need to use OpenFaaS from the client machine.
 One-liner:
# openfaas-cli curl -sSL https://cli.openfaas.com | sudo sh Configuration # Set namespace export OS_NS=&amp;#34;openfaas&amp;#34; # Get password export OF_PASS=$(echo $(kubectl -n $OS_NS get secret basic-auth -o jsonpath=&amp;#34;{.data.basic-auth-password}&amp;#34; | base64 --decode)) echo $OF_PASS # Get URI echo &amp;#34;export OPENFAAS_URL=http://&amp;#34;$(kubectl -n $OS_NS describe pods $(kubectl -n $OS_NS get pods | grep &amp;#34;gateway-&amp;#34; | awk &amp;#39;{print $1}&amp;#39;) | grep &amp;#34;^Node:&amp;#34; | awk -F &amp;#34;/&amp;#34; &amp;#39;{print $2}&amp;#39;)&amp;#34;:31112&amp;#34; Login echo $OF_PASS | faas-cli login --password-stdin </description>
    </item>
    
  </channel>
</rss>
