<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on My Kubernetes Book</title>
    <link>https://k8s-book.vupti.me/</link>
    <description>Recent content in Introduction on My Kubernetes Book</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://k8s-book.vupti.me/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>All nodes pre-requisites</title>
      <link>https://k8s-book.vupti.me/k3s-cluster-deployment/all-nodes-pre-requisites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s-book.vupti.me/k3s-cluster-deployment/all-nodes-pre-requisites/</guid>
      <description>Network configuration # Network setup vi /etc/netplan/50-cloud-init.yaml netplan apply DNS resolver This step enable the use of systemd-resolved in Ubuntu based distribution OS:
# Local DNS resolver for local fqdn echo &amp;#34;192.168.2.4 k3s-mstr k3s-mstr.vlab..lcl&amp;#34; &amp;gt;&amp;gt; /etc/hosts sudo service systemd-resolved stop sudo rm -f /etc/resolv.conf sudo ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf sudo service systemd-resolved start Software pre-requisites # Upgrade packages sudo apt update sudo apt upgrade -y # Install software pre-requisites sudo apt-get install python3-pip gcc nfs-common -y (optionnal) proxy configuration Use the following commands if you need to use a corporate HTTP proxy server to reach Internet based resources:</description>
    </item>
    
    <item>
      <title>Basics tools</title>
      <link>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/basics/</guid>
      <description>Generic pre-requisites We will need pip and gcc for some tools, so lets install them if needed:
sudo apt-get install python3-pip gcc -y Install kubectl CLI tool In order to test and manage the k3s cluster, it could be useful to have a kubectl cli install in the master nodes:
curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl chmod +x ./kubectl sudo mv ./kubectl /usr/local/bin/kubectl # Test it kubectl version --client kubectl auto-complete Use the following commands to add auto-completion to your bash shell for the kubectl command (or it&amp;rsquo;s k alias)</description>
    </item>
    
    <item>
      <title>Initial master node</title>
      <link>https://k8s-book.vupti.me/k3s-cluster-deployment/initial-master-node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s-book.vupti.me/k3s-cluster-deployment/initial-master-node/</guid>
      <description>The following section will explain how to deploy the initial master node of the k3s cluster.
Install kubectl CLI tool In order to test and manage the k3s cluster, it could be useful to have a kubectl cli install in the master nodes:
curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl chmod +x ./kubectl sudo mv ./kubectl /usr/local/bin/kubectl # Test it kubectl version --client Auto-complete Use the following commands to add auto-completion to your bash shell for the kubectl command (or it&amp;rsquo;s k alias)</description>
    </item>
    
    <item>
      <title>Worker node(s)</title>
      <link>https://k8s-book.vupti.me/k3s-cluster-deployment/worker-node-s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s-book.vupti.me/k3s-cluster-deployment/worker-node-s/</guid>
      <description>The following section will explain how to join additional worker nodes to your k3s deployment.
First of all, you will need to get the cluster token, as explained in the previous section and the master node fqdn.
Deploy k3s to join an existing cluster curl -sfL https://get.k3s.io | \  K3S_URL=&amp;#34;https://k3s-mstr.vlab.lcl:6443&amp;#34; \  K3S_TOKEN=&amp;#34;K10d1...fe537::server:26a92...e34f9&amp;#34; \  sh - Check From the master node or any client device with access to the Kubernetes cluster, ensure that the node is now added to the cluster:</description>
    </item>
    
    <item>
      <title>k9s</title>
      <link>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/k9s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/k9s/</guid>
      <description>K9s is a terminal based UI to interact with your Kubernetes clusters. The aim of this project is to make it easier to navigate, observe and manage your deployed applications in the wild.
K9s continually watches Kubernetes for changes and offers subsequent commands to interact with your observed resources.
CLI installation curl -L https://github.com/derailed/k9s/releases/download/v0.24.2/k9s_Linux_x86_64.tar.gz | tar -xz chmod +x k9s &amp;amp;&amp;amp; sudo mv ./k9s /usr/local/bin/k9s k9s version Skin Apply a pre-defined skin to the output:</description>
    </item>
    
    <item>
      <title>kubens &amp; kubectx</title>
      <link>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/kubens-and-kubectx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/kubens-and-kubectx/</guid>
      <description> Thanks to @ahmetb: https://github.com/ahmetb/kubectx
  kubectxis a utility to manage and switch between kubectl contexts. kubensis a utility to switch between Kubernetes namespaces.  sudo git clone https://github.com/ahmetb/kubectx /opt/kubectx sudo ln -s /opt/kubectx/kubectx /usr/local/bin/kubectx sudo ln -s /opt/kubectx/kubens /usr/local/bin/kubens Then you can easly switch both context and namespace by:
kubectx # list contexts kubectx &amp;lt;name&amp;gt; # switch context kubens # list namespace kubens &amp;lt;name&amp;gt; # switch namespace </description>
    </item>
    
    <item>
      <title>Octant</title>
      <link>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/octant/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/octant/</guid>
      <description>Octant is a tool for developers to understand how applications run on a Kubernetes cluster.
It aims to be part of the developer&amp;rsquo;s toolkit for gaining insight and approaching complexity found in Kubernetes. Octant offers a combination of introspective tooling, cluster navigation, and object management along with a plugin system to further extend its capabilities.
 Installation curl -L https://github.com/vmware-tanzu/octant/releases/download/v0.16.3/octant_0.16.3_Linux-64bit.deb &amp;gt; /tmp/octant.deb dpkg -i /tmp/octant.deb OCTANT_LISTENER_ADDR=X.X.X.X:7777 OCTANT_ACCEPTED_HOSTS=Y.Y.Y.Y octant --disable-open-browser Then go to http://k3s-mstr.</description>
    </item>
    
    <item>
      <title>Argo cli</title>
      <link>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/argo-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/argo-cli/</guid>
      <description> If you need to use Argo from this client machine.
 Please check version from this releases page.
 curl -sL https://github.com/argoproj/argo/releases/download/latest/argo-linux-amd64.gz | gunzip &amp;gt; argo chmod +x argo &amp;amp;&amp;amp; sudo mv ./argo /usr/local/bin/argo argo version Configuration # Argo namespace export ARGO_NAMESPACE=argo # Start port forwarding kubectl -n $ARGO_NAMESPACE port-forward deployment/argo-server 2746:2746 &amp;amp; # keep it running in bg; user the following command to get the job number: jobs # if needed: get it back in foreground: fg 1 </description>
    </item>
    
    <item>
      <title>OpenFaaS CLI</title>
      <link>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/openfaas-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://k8s-book.vupti.me/setup-a-powerful-kubernetes-client/openfaas-cli/</guid>
      <description> If you need to use OpenFaaS from the client machine.
 One-liner:
# openfaas-cli curl -sSL https://cli.openfaas.com | sudo sh Configuration # Set namespace export OS_NS=&amp;#34;openfaas&amp;#34; # Get password export OF_PASS=$(echo $(kubectl -n $OS_NS get secret basic-auth -o jsonpath=&amp;#34;{.data.basic-auth-password}&amp;#34; | base64 --decode)) echo $OF_PASS # Get URI echo &amp;#34;export OPENFAAS_URL=http://&amp;#34;$(kubectl -n $OS_NS describe pods $(kubectl -n $OS_NS get pods | grep &amp;#34;gateway-&amp;#34; | awk &amp;#39;{print $1}&amp;#39;) | grep &amp;#34;^Node:&amp;#34; | awk -F &amp;#34;/&amp;#34; &amp;#39;{print $2}&amp;#39;)&amp;#34;:31112&amp;#34; Login echo $OF_PASS | faas-cli login --password-stdin </description>
    </item>
    
  </channel>
</rss>
