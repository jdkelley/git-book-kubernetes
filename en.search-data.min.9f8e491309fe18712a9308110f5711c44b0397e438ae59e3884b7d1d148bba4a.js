'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/k3s-cluster-deployment/all-nodes-pre-requisites/','title':"All nodes pre-requisites",'section':"Deploy a k3S cluster",'content':"All nodes pre-requisites #  Network configuration #  # Network setup vi /etc/netplan/50-cloud-init.yaml netplan apply DNS resolver #  This step enable the use of systemd-resolved in Ubuntu based distribution OS:\n# Local DNS resolver for local fqdn echo \u0026#34;192.168.2.4 k3s-mstr k3s-mstr.vlab..lcl\u0026#34; \u0026gt;\u0026gt; /etc/hosts sudo service systemd-resolved stop sudo rm -f /etc/resolv.conf sudo ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf sudo service systemd-resolved start Software pre-requisites #  # Upgrade packages sudo apt update sudo apt upgrade -y # Install software pre-requisites sudo apt-get install python3-pip gcc nfs-common -y (optionnal) proxy configuration #  Use the following commands if you need to use a corporate HTTP proxy server to reach Internet based resources:\n# Proxy setup echo \u0026#34;HTTP_PROXY=X.X.X.X:8080 HTTPS_PROXY=X.X.X.X:8080 NO_PROXY=.vlab.lcl,192.168.0.0/16,127.0.0.1,localhost\u0026#34; \u0026gt;\u0026gt; /etc/environment export HTTP_PROXY=\u0026#34;X.X.X.X:8080\u0026#34; export HTTPS_PROXY=\u0026#34;X.X.X.X:8080\u0026#34; export NO_PROXY=\u0026#34;.vlab.lcl,192.168.0.0/16,127.0.0.1,localhost\u0026#34; echo \u0026#34;Acquire::http::proxy \\\u0026#34;http://X.X.X.X:8080\\\u0026#34;;\u0026#34; \u0026gt;\u0026gt; /etc/apt/apt.conf # Test curl https://google.com "});index.add({'id':1,'href':'/k3s-cluster-deployment/initial-master-node/','title':"Initial master node",'section':"Deploy a k3S cluster",'content':"The following section will explain how to deploy the initial master node of the k3s cluster.\nInitial master node #  Install kubectl CLI tool #  In order to test and manage the k3s cluster, it could be useful to have a kubectl cli install in the master nodes:\ncurl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl chmod +x ./kubectl sudo mv ./kubectl /usr/local/bin/kubectl # Test it kubectl version --client Auto-complete #  Use the following commands to add auto-completion to your bash shell for the kubectl command (or it\u0026rsquo;s k alias)\necho \u0026#39;source \u0026lt;(kubectl completion bash)\u0026#39; \u0026gt;\u0026gt;~/.bashrc echo \u0026#39;alias k=kubectl\u0026#39; \u0026gt;\u0026gt;~/.bashrc echo \u0026#39;complete -F __start_kubectl k\u0026#39; \u0026gt;\u0026gt;~/.bashrc Deploy #  # Deploy a new k3s master node curl -sfL https://get.k3s.io | sh - Configuration file #  # enable read for other users sudo chmod 644 /etc/rancher/k3s/k3s.yaml export KUBECONFIG=/etc/rancher/k3s/k3s.yaml You can test the connection to the cluster by listing the deployed pods and the list of nodes in the cluster (only one will be listed by now):\nkubectl get pods --all-namespaces kubectl get nodes Retrieve the cluster token #  This token will be used to join the other nodes to the current k3s deployment:\nsudo cat /var/lib/rancher/k3s/server/node-token (optional) Proxy declaration #  If you are in a corporate-proxy situation, you can specify it in the Kubernetes deployment by deploying the following configMap:\n{% code title=\u0026ldquo;proxy.yaml\u0026rdquo; %}\napiVersion: v1 kind: ConfigMap metadata: name: lab-proxy labels: app: proxy data: HTTPS_PROXY: http://X.X.X.X:8080 HTTP_PROXY: http://X.X.X.X:8080 NO_PROXY: .vlab.lcl,192.168.0.0/16,127.0.0.1,localhost {% endcode %}\nkubectl apply -f proxy.yaml "});index.add({'id':2,'href':'/k3s-cluster-deployment/worker-node-s/','title':"Worker node(s)",'section':"Deploy a k3S cluster",'content':"The following section will explain how to join additional worker nodes to your k3s deployment.\nWorker node(s) #  First of all, you will need to get the cluster token, as explained in the previous section and the master node fqdn.\nDeploy k3s to join an existing cluster #  curl -sfL https://get.k3s.io | \\  K3S_URL=\u0026#34;https://k3s-mstr.vlab.lcl:6443\u0026#34; \\  K3S_TOKEN=\u0026#34;K10d1...fe537::server:26a92...e34f9\u0026#34; \\  sh - Check #  From the master node or any client device with access to the Kubernetes cluster, ensure that the node is now added to the cluster:\nkubectl get nodes "});index.add({'id':3,'href':'/setup-a-powerful-kubernetes-client/k9s/','title':"k9s",'section':"Setup a powerful Kubernetes client",'content':"K9s is a terminal based UI to interact with your Kubernetes clusters. The aim of this project is to make it easier to navigate, observe and manage your deployed applications in the wild.\nk9s #  K9s continually watches Kubernetes for changes and offers subsequent commands to interact with your observed resources.\nCLI installation #  curl -L https://github.com/derailed/k9s/releases/download/v0.24.2/k9s_Linux_x86_64.tar.gz | tar -xz chmod +x k9s \u0026amp;\u0026amp; sudo mv ./k9s /usr/local/bin/k9s k9s version Skin #  Apply a pre-defined skin to the output:\nmkdir -p ~/.k9s curl -L https://raw.githubusercontent.com/derailed/k9s/master/skins/one_dark.yml \u0026gt; ~/.k9s/skin.yml # or curl -L https://raw.githubusercontent.com/derailed/k9s/master/skins/solarized_dark.yml \u0026gt; ~/.k9s/skin.yml "});index.add({'id':4,'href':'/setup-a-powerful-kubernetes-client/kubens-and-kubectx/','title':"kubens \u0026 kubectx",'section':"Setup a powerful Kubernetes client",'content':"kubens \u0026amp; kubectx #  Thanks to @ahmetb: https://github.com/ahmetb/kubectx\n kubectxis a utility to manage and switch between kubectl contexts. kubensis a utility to switch between Kubernetes namespaces.  sudo git clone https://github.com/ahmetb/kubectx /opt/kubectx sudo ln -s /opt/kubectx/kubectx /usr/local/bin/kubectx sudo ln -s /opt/kubectx/kubens /usr/local/bin/kubens Then you can easly switch both context and namespace by:\nkubectx # list contexts kubectx \u0026lt;name\u0026gt; # switch context kubens # list namespace kubens \u0026lt;name\u0026gt; # switch namespace "});index.add({'id':5,'href':'/setup-a-powerful-kubernetes-client/octant/','title':"Octant",'section':"Setup a powerful Kubernetes client",'content':"Octant is a tool for developers to understand how applications run on a Kubernetes cluster\nOctant #   It aims to be part of the developer\u0026rsquo;s toolkit for gaining insight and approaching complexity found in Kubernetes. Octant offers a combination of introspective tooling, cluster navigation, and object management along with a plugin system to further extend its capabilities.\n Installation #  curl -L https://github.com/vmware-tanzu/octant/releases/download/v0.16.3/octant_0.16.3_Linux-64bit.deb \u0026gt; /tmp/octant.deb dpkg -i /tmp/octant.deb OCTANT_LISTENER_ADDR=X.X.X.X:7777 OCTANT_ACCEPTED_HOSTS=Y.Y.Y.Y octant --disable-open-browser Then go to http://k3s-mstr.vlab.lcl:7777.\n"});index.add({'id':6,'href':'/setup-a-powerful-kubernetes-client/argo-cli/','title':"Argo cli",'section':"Setup a powerful Kubernetes client",'content':"If you need to use Argo from this client machine.\nArgo cli #  Please check version from this releases page.\ncurl -sL https://github.com/argoproj/argo/releases/download/latest/argo-linux-amd64.gz | gunzip \u0026gt; argo chmod +x argo \u0026amp;\u0026amp; sudo mv ./argo /usr/local/bin/argo argo version Configuration #  # Argo namespace export ARGO_NAMESPACE=argo # Start port forwarding kubectl -n $ARGO_NAMESPACE port-forward deployment/argo-server 2746:2746 \u0026amp; # keep it running in bg; user the following command to get the job number: jobs # if needed: get it back in foreground: fg 1 "});index.add({'id':7,'href':'/setup-a-powerful-kubernetes-client/openfaas-cli/','title':"OpenFaaS CLI",'section':"Setup a powerful Kubernetes client",'content':" If you need to use OpenFaaS from the client machine.\n OpenFaaS CLI #  One-liner:\n# openfaas-cli curl -sSL https://cli.openfaas.com | sudo sh Configuration #  # Set namespace export OS_NS=\u0026#34;openfaas\u0026#34; # Get password export OF_PASS=$(echo $(kubectl -n $OS_NS get secret basic-auth -o jsonpath=\u0026#34;{.data.basic-auth-password}\u0026#34; | base64 --decode)) echo $OF_PASS # Get URI echo \u0026#34;export OPENFAAS_URL=http://\u0026#34;$(kubectl -n $OS_NS describe pods $(kubectl -n $OS_NS get pods | grep \u0026#34;gateway-\u0026#34; | awk \u0026#39;{print $1}\u0026#39;) | grep \u0026#34;^Node:\u0026#34; | awk -F \u0026#34;/\u0026#34; \u0026#39;{print $2}\u0026#39;)\u0026#34;:31112\u0026#34; Login #  echo $OF_PASS | faas-cli login --password-stdin "});index.add({'id':8,'href':'/k3s-cluster-deployment/','title':"Deploy a k3S cluster",'section':"Introduction",'content':"Deploy a k3S cluster #  The following how-to guide provides some step to create a k3s based Kubernetes cluster on Ubuntu 20.04 (LTS).\n"});index.add({'id':9,'href':'/setup-a-powerful-kubernetes-client/','title':"Setup a powerful Kubernetes client",'section':"Introduction",'content':"This section provides some tools and tricks to apply to a *nix based workstation or jump server to have a powerful Kubernetes (and other tools) client machine.\nSetup a powerful Kubernetes client #  Generic pre-requisites #  We will need pip and gcc for some tools, so lets install them if needed:\nsudo apt-get install python3-pip gcc -y Install kubectl CLI tool #  In order to test and manage the k3s cluster, it could be useful to have a kubectl cli install in the master nodes:\ncurl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl chmod +x ./kubectl sudo mv ./kubectl /usr/local/bin/kubectl # Test it kubectl version --client kubectl auto-complete #  Use the following commands to add auto-completion to your bash shell for the kubectl command (or it\u0026rsquo;s k alias)\necho \u0026#39;source \u0026lt;(kubectl completion bash)\u0026#39; \u0026gt;\u0026gt;~/.bashrc echo \u0026#39;alias k=kubectl\u0026#39; \u0026gt;\u0026gt;~/.bashrc echo \u0026#39;complete -F __start_kubectl k\u0026#39; \u0026gt;\u0026gt;~/.bashrc Heml #  Easy peasy:\ncurl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash "});})();